
describe("Unauthorized npg final status mapping tests", () => {

  /**
     * Test input and configuration
  */

  const CHECKOUT_OUTCOME_URL = "http://localhost:1234/esito";


  //const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_UNKNOWN_ERROR_CODE = {mockFLow : "UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_UNKNOWN_ERROR_CODE" , value: "302016723740200074"};
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_PENDING = "302016723740200076";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_VOIDED = "302016723740200077";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_REFUNDED = "302016723740200078";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_FAILED = "302016723740200079";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_CANCELED = "302016723740200080";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DENIED_BY_RISK = "302016723740200081";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_THREEDS_VALIDATED = "302016723740200082";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_THREEDS_FAILED = "302016723740200083";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_100 = "302016723740200084";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_101 = "302016723740200085";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_102 = "302016723740200086";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_104 = "302016723740200087";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_106 = "302016723740200088";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_109 = "302016723740200089";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_110 = "302016723740200090";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_111 = "302016723740200091";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_115 = "302016723740200092";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_116 = "302016723740200093";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_117 = "302016723740200094";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_118 = "302016723740200095";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_119 = "302016723740200096";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_120 = "302016723740200097";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_121 = "302016723740200098";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_122 = "302016723740200099";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_123 = "302016723740200100";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_124 = "302016723740200101";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_125 = "302016723740200102";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_126 = "302016723740200103";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_129 = "302016723740200104";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_200 = "302016723740200105";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_202 = "302016723740200106";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_204 = "302016723740200107";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_208 = "302016723740200108";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_209 = "302016723740200109";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_210 = "302016723740200110";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_413 = "302016723740200111";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_888 = "302016723740200112";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_902 = "302016723740200113";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_903 = "302016723740200114";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_904 = "302016723740200115";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_906 = "302016723740200116";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_907 = "302016723740200117";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_908 = "302016723740200118";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_909 = "302016723740200119";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_911 = "302016723740200120";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_913 = "302016723740200121";
  // const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_999 = "302016723740200122";

  const UNAUTHORIZED_WITH_NPG_AUTH_STATUS_AUTHORIZED = {mockFLow : "UNAUTHORIZED_WITH_NPG_AUTH_STATUS_AUTHORIZED" , value: "302016723740200074"};


  var testsNpgMap = new Map([
    [
      UNAUTHORIZED_WITH_NPG_AUTH_STATUS_AUTHORIZED,
      { title: "Should fails - final status UNATHORIZED with NPG gateway authorization status AUTHORIZED", esito: "Spiacenti, si Ã¨ verificato un errore imprevisto." }
    ]
  ]);


  /**
   * Increase default test timeout (80000ms)
   * to support entire payment flow
    */
  jest.setTimeout(120000);
  jest.retryTimes(1);
  page.setDefaultNavigationTimeout(120000);
  page.setDefaultTimeout(120000);

  beforeAll(async () => {
    await page.goto(CHECKOUT_OUTCOME_URL);
    await page.setViewport({ width: 1200, height: 907 });
  })

  beforeEach(async () => {
    await page.evaluate(() => {
      let sessionData =  '{"authToken":"token","clientId":"CHECKOUT","payments":[{"amount":12000,"isAllCCP":false,"paymentToken":"paymentToken1","reason":"reason1","rptId":"77777777777302001751670642100","transferList":[{"digitalStamp":true,"paFiscalCode":"66666666666","transferAmount":100,"transferCategory":"transferCategory1"},{"digitalStamp":false,"paFiscalCode":"77777777777","transferAmount":900,"transferCategory":"transferCategory2"}]}],"status":"ACTIVATED","transactionId":"f4f1b6a82b7d473583b506fcd5edf308"}';
      sessionStorage.setItem('transaction', sessionData);
      localStorage.setItem('transaction', sessionData);
    });

    await page.goto(CHECKOUT_OUTCOME_URL);
   
  });

  Array.from(testsNpgMap.keys()).forEach(keyRptId => {
    it(testsNpgMap.get(keyRptId)?.title || "", async () => {
      await page.setCookie({name: "mockFlow", value:  keyRptId.mockFLow});
      const resultTitleSelector = "#responsePageMessageTitle";
      const message = await page.waitForSelector(resultTitleSelector);
      const responseMessage = await message.evaluate((el) => el.textContent);
      expect(responseMessage).toContain(testsNpgMap.get(keyRptId)?.esito);
    })
  });

});