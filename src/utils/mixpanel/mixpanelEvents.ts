import { ViewOutcomeEnum } from "../transactions/TransactionResultUtil";

export enum MixpanelEventsId {
  CHK_PAYMENT_NOTICE_DATA_ENTRY = "CHK_PAYMENT_NOTICE_DATA_ENTRY",
  CHK_PAYMENT_NOTICE_QRCODE_SCAN = "CHK_PAYMENT_NOTICE_QRCODE_SCAN",
  CHK_PAYMENT_NOTICE_DATA_ENTRY_MANUAL = "CHK_PAYMENT_NOTICE_DATA_ENTRY_MANUAL",
  CHK_QRCODE_SCAN_SCREEN_MANUAL_ENTRY = "CHK_QRCODE_SCAN_SCREEN_MANUAL_ENTRY",
  CHK_QRCODE_SCAN_SCREEN = "CHK_QRCODE_SCAN_SCREEN",
  CHK_PAYMENT_NOTICE_MANUAL_ENTRY = "CHK_PAYMENT_NOTICE_MANUAL_ENTRY",
  CHK_PAYMENT_SUMMARY_INFO_SCREEN = "CHK_PAYMENT_SUMMARY_INFO_SCREEN",
  CHK_PAYMENT_START_FLOW = "CHK_PAYMENT_START_FLOW",
  CHK_PAYMENT_EMAIL_ADDRESS = "CHK_PAYMENT_EMAIL_ADDRESS",
  CHK_PAYMENT_METHOD_SELECTION = "CHK_PAYMENT_METHOD_SELECTION",
  CHK_PAYMENT_METHOD_DATA_INSERT = "CHK_PAYMENT_METHOD_DATA_INSERT",
  CHK_PAYMENT_FEE_SELECTION = "CHK_PAYMENT_FEE_SELECTION",
  CHK_PAYMENT_SUMMARY = "CHK_PAYMENT_SUMMARY",
  CHK_PAYMENT_SUMMARY_PAYMENT_METHOD_EDIT = "CHK_PAYMENT_SUMMARY_PAYMENT_METHOD_EDIT",
  CHK_PAYMENT_SUMMARY_PSP_EDIT = "CHK_PAYMENT_SUMMARY_PSP_EDIT",
  CHK_PAYMENT_UX_CONVERSION = "CHK_PAYMENT_UX_CONVERSION",
  CHK_PAYMENT_UX_SUCCESS = "CHK_PAYMENT_UX_SUCCESS",

  /* ERROR EVENT IDS */
  CHK_PAYMENT_INVALID_CODE_ERROR = "CHK_PAYMENT_INVALID_CODE_ERROR",
  PAYMENT_UNAVAILABLE = "PAYMENT_UNAVAILABLE",
  PAYMENT_DATA_ERROR = "PAYMENT_DATA_ERROR",
  DOMAIN_UNKNOWN = "DOMAIN_UNKNOWN",
  PAYMENT_ONGOING = "PAYMENT_ONGOING",
  PAYMENT_EXPIRED = "PAYMENT_EXPIRED",
  PAYMENT_CANCELED = "PAYMENT_CANCELED",
  PAYMENT_DUPLICATED = "PAYMENT_DUPLICATED",
  GENERIC_ERROR = "GENERIC_ERROR",
  PAYMENT_UNKNOWN = "PAYMENT_UNKNOW",

  AUTH_ERROR = "AUTH_ERROR",
  INVALID_DATA = "INVALID_DATA",
  TIMEOUT = "TIMEOUT",
  CIRCUIT_ERROR = "CIRCUIT_ERROR",
  MISSING_FIELDS = "MISSING_FIELDS",
  INVALID_CARD = "INVALID_CARD",
  CANCELED_BY_USER = "CANCELED_BY_USER",
  EXCESSIVE_AMOUNT = "EXCESSIVE_AMOUNT",
  INVALID_METHOD = "INVALID_METHOD",
  TAKING_CHARGE = "PRESA_IN_CARICO",
  REFUNDED = "REFUNDED",
  PSP_ERROR = "PSP_ERROR",
  BALANCE_LIMIT = "BALANCE_LIMIT",
  LIMIT_EXCEEDED = "LIMIT_EXCEEDED",

  CHK_LOGIN_REQUEST = "CHK_LOGIN_REQUEST",
  CHK_LOGIN_SUCCESS = "CHK_LOGIN_SUCCESS",
  SCHEDULED_MAINTENANCE_MORE_INFO = "SCHEDULED_MAINTENANCE_MORE_INFO",
  SCHEDULED_MAINTENANCE = "SCHEDULED_MAINTENANCE",

  CHK_PAYMENT_ERROR_HELP = "CHK_PAYMENT_ERROR_HELP",
}

export enum MixpanelEventCategory {
  UX = "UX",
  KO = "KO",
  TECH = "TECH",
}

export enum MixpanelEventType {
  SCREEN_VIEW = "screen view",
  ACTION = "action",
}

export enum MixpanelDataEntryType {
  QR_CODE = "qr_code",
  MANUAL = "manual",
}

export function mixpanelDataEntryTypeFromString(
  value: string
): MixpanelDataEntryType | undefined {
  return Object.values(MixpanelDataEntryType).includes(
    value as MixpanelDataEntryType
  )
    ? (value as MixpanelDataEntryType)
    : undefined;
}

export enum MixpanelFlow {
  CART = "cart",
  DATA_ENTRY = "data_entry",
}

export enum MixpanelPaymentPhase {
  VERIFICA = "verifica",
  ATTIVA = "attiva",
  PAGAMENTO = "pagamento",
}

export const eventViewOutcomeMap: Partial<Record<ViewOutcomeEnum, string>> = {
  [ViewOutcomeEnum.SUCCESS]: MixpanelEventsId.CHK_PAYMENT_UX_SUCCESS,
  [ViewOutcomeEnum.AUTH_ERROR]: MixpanelEventsId.AUTH_ERROR,
  [ViewOutcomeEnum.INVALID_DATA]: MixpanelEventsId.INVALID_DATA,
  [ViewOutcomeEnum.TIMEOUT]: MixpanelEventsId.TIMEOUT,
  [ViewOutcomeEnum.CIRCUIT_ERROR]: MixpanelEventsId.CIRCUIT_ERROR,
  [ViewOutcomeEnum.MISSING_FIELDS]: MixpanelEventsId.MISSING_FIELDS,
  [ViewOutcomeEnum.INVALID_CARD]: MixpanelEventsId.INVALID_CARD,
  [ViewOutcomeEnum.CANCELED_BY_USER]: MixpanelEventsId.CANCELED_BY_USER,
  [ViewOutcomeEnum.EXCESSIVE_AMOUNT]: MixpanelEventsId.EXCESSIVE_AMOUNT,
  [ViewOutcomeEnum.REFUNDED]: MixpanelEventsId.REFUNDED,
  [ViewOutcomeEnum.PSP_ERROR]: MixpanelEventsId.PSP_ERROR,
  [ViewOutcomeEnum.BALANCE_LIMIT]: MixpanelEventsId.BALANCE_LIMIT,
  [ViewOutcomeEnum.LIMIT_EXCEEDED]: MixpanelEventsId.LIMIT_EXCEEDED,
  [ViewOutcomeEnum.INVALID_METHOD]: MixpanelEventsId.INVALID_METHOD,
  [ViewOutcomeEnum.TAKING_CHARGE]: MixpanelEventsId.TAKING_CHARGE,
};
